AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: IP Threat Management System - Serverless Deployment

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        DYNAMODB_TABLE_USERS: !Ref UsersTable
        DYNAMODB_TABLE_CATEGORIES: !Ref CategoriesTable
        DYNAMODB_TABLE_IP_ENTRIES: !Ref IPEntriesTable
        DYNAMODB_TABLE_WHITELIST: !Ref WhitelistTable
        SECRETS_NAME: !Ref APISecretsManager
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  AbuseIPDBKey:
    Type: String
    NoEcho: true
    Description: AbuseIPDB API Key
    
  VirusTotalKey:
    Type: String
    NoEcho: true
    Description: VirusTotal API Key

Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-threat-intel-users"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: username-index
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-threat-intel-categories"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: name-index
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  IPEntriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-threat-intel-ip-entries"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: ip
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: category-index
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
        - IndexName: ip-index
          KeySchema:
            - AttributeName: ip
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  WhitelistTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-threat-intel-whitelist"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: ip
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ip-index
          KeySchema:
            - AttributeName: ip
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Secrets Manager for API Keys
  APISecretsManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}-threat-intel-api-keys"
      Description: API Keys for external threat intelligence services
      SecretString: !Sub |
        {
          "abuseipdb_key": "${AbuseIPDBKey}",
          "virustotal_key": "${VirusTotalKey}"
        }

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-threat-intel-auth"
      CodeUri: src/lambda/auth/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /api/auth/login
            Method: post
        LogoutApi:
          Type: Api
          Properties:
            Path: /api/auth/logout
            Method: post

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-threat-intel-users"
      CodeUri: src/lambda/users/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /api/users
            Method: get
        CreateUser:
          Type: Api
          Properties:
            Path: /api/users
            Method: post
        UpdateUser:
          Type: Api
          Properties:
            Path: /api/users/{id}
            Method: put
        DeleteUser:
          Type: Api
          Properties:
            Path: /api/users/{id}
            Method: delete

  CategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-threat-intel-categories"
      CodeUri: src/lambda/categories/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetCategories:
          Type: Api
          Properties:
            Path: /api/categories
            Method: get
        CreateCategory:
          Type: Api
          Properties:
            Path: /api/categories
            Method: post
        UpdateCategory:
          Type: Api
          Properties:
            Path: /api/categories/{id}
            Method: put
        DeleteCategory:
          Type: Api
          Properties:
            Path: /api/categories/{id}
            Method: delete

  IPEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-threat-intel-ip-entries"
      CodeUri: src/lambda/ip-entries/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IPEntriesTable
        - DynamoDBReadPolicy:
            TableName: !Ref WhitelistTable
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable
        - SecretsManagerReadWrite
      Events:
        GetIPEntries:
          Type: Api
          Properties:
            Path: /api/ip-entries
            Method: get
        CreateIPEntry:
          Type: Api
          Properties:
            Path: /api/ip-entries
            Method: post
        UpdateIPEntry:
          Type: Api
          Properties:
            Path: /api/ip-entries/{id}
            Method: put
        DeleteIPEntry:
          Type: Api
          Properties:
            Path: /api/ip-entries/{id}
            Method: delete
        CheckIPReputation:
          Type: Api
          Properties:
            Path: /api/ip-entries/check/{ip}
            Method: get

  WhitelistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-threat-intel-whitelist"
      CodeUri: src/lambda/whitelist/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WhitelistTable
      Events:
        GetWhitelist:
          Type: Api
          Properties:
            Path: /api/whitelist
            Method: get
        AddToWhitelist:
          Type: Api
          Properties:
            Path: /api/whitelist
            Method: post
        RemoveFromWhitelist:
          Type: Api
          Properties:
            Path: /api/whitelist/{id}
            Method: delete

  EDLFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-threat-intel-edl"
      CodeUri: src/lambda/edl/
      Handler: index.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IPEntriesTable
        - DynamoDBReadPolicy:
            TableName: !Ref WhitelistTable
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetEDL:
          Type: Api
          Properties:
            Path: /api/edl/{category}
            Method: get

  ThreatIntelSyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-threat-intel-sync"
      CodeUri: src/lambda/sync/
      Handler: index.handler
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IPEntriesTable
        - DynamoDBReadPolicy:
            TableName: !Ref WhitelistTable
        - SecretsManagerReadWrite
      Events:
        SyncAbuseIPDB:
          Type: Api
          Properties:
            Path: /api/sync/abuseipdb
            Method: post
        SyncVirusTotal:
          Type: Api
          Properties:
            Path: /api/sync/virustotal
            Method: post
        ScheduledSync:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
            Input: '{"source": "scheduled"}'

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-threat-intel-frontend-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${FrontendBucket}/*"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: APIOrigin
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /Prod
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: [Authorization, Content-Type]
              Cookies:
                Forward: none
            TTL: 0
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${Environment}-threat-intel-api-endpoint"

  CloudFrontURL:
    Description: "CloudFront Distribution URL"
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${Environment}-threat-intel-frontend-url"

  FrontendBucketName:
    Description: "S3 Bucket for Frontend"
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub "${Environment}-threat-intel-frontend-bucket"

  UsersTableName:
    Description: "DynamoDB Users Table Name"
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${Environment}-threat-intel-users-table"

  CategoriesTableName:
    Description: "DynamoDB Categories Table Name"
    Value: !Ref CategoriesTable
    Export:
      Name: !Sub "${Environment}-threat-intel-categories-table"

  IPEntriesTableName:
    Description: "DynamoDB IP Entries Table Name"
    Value: !Ref IPEntriesTable
    Export:
      Name: !Sub "${Environment}-threat-intel-ip-entries-table"

  WhitelistTableName:
    Description: "DynamoDB Whitelist Table Name"
    Value: !Ref WhitelistTable
    Export:
      Name: !Sub "${Environment}-threat-intel-whitelist-table"